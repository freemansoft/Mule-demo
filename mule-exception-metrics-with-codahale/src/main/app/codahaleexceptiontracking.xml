<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:https="http://www.mulesoft.org/schema/mule/https" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.5.2"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/https http://www.mulesoft.org/schema/mule/https/current/mule-https.xsd">

  	<custom-agent name="metricAgent" class="com.freemansoft.metrics.flowexception.MetricAgent" >
        <spring:property name="metricRegistry" ref="codahaleMetricRegistry"/>
        <spring:property name="appName" value="${app.name}"/>
    </custom-agent>

    <spring:beans>
        <spring:bean name="codahaleMetricRegistry" class="com.codahale.metrics.MetricRegistry" scope="singleton"/> 
        <spring:bean name="codahaleMetricRecordFlowException" class="com.freemansoft.metrics.flowexception.MetricRecordFlowException" scope="singleton" >
            <spring:constructor-arg name="metricRegistry" ref="codahaleMetricRegistry"/>
        </spring:bean>
        
        <spring:bean name="codahaleMetricSystemExceptionShim" class="com.freemansoft.metrics.systemexception.SystemExceptionMetricContextShim" scope="singleton" >
            <spring:constructor-arg name="metricAwareExceptionListener" ref="codahaleMetricRecordSystemException"/>
        </spring:bean>
        <spring:bean name="codahaleMetricRecordSystemException" class="com.freemansoft.metrics.systemexception.SystemExceptionMetricListener" scope="singleton" >
            <spring:constructor-arg name="metricRegistry" ref="codahaleMetricRegistry"/>
        </spring:bean>
    </spring:beans>
    
    <https:connector name="HTTP_HTTPS" cookieSpec="netscape" validateConnections="true" sendBufferSize="0" receiveBufferSize="0" receiveBacklog="0" clientSoTimeout="10000" serverSoTimeout="10000" socketSoLinger="0" doc:name="HTTP-HTTPS">
        <https:tls-key-store path="foo" keyPassword="password" storePassword="password"/>
    </https:connector>
    
    <flow name="codahaleexceptiontrackingFlow1" doc:name="codahaleexceptiontrackingFlow1">
        <http:inbound-endpoint exchange-pattern="request-response" host="localhost" port="8081"  contentType="text/html" doc:name="HTTP"/>
        <choice doc:name="Choice">
            <when expression="#[message.inboundProperties['http.relative.path'] == '1']">
                <scripting:component doc:name="JavaScript">
                    <scripting:script engine="JavaScript"><![CDATA[//throwing java exceptions creates unsatisfactory results
//throw new UnsupportedOperationException('this message created in javascript');
throw new TypeError("this javascript error message created in javascript ")]]></scripting:script>
                </scripting:component>
            </when>
            <when expression="#[message.inboundProperties['http.relative.path'] == '2']">
                <scripting:component doc:name="Ruby">
                    <scripting:script engine="jruby"><![CDATA[raise ModelException('this message created in a Ruby script').new]]></scripting:script>
                </scripting:component>
            </when>
            <when expression="#[message.inboundProperties['http.relative.path'] == '3']">
                <component doc:name="Java" class="com.freemansoft.dummyclasses.ThrowExceptionEveryTime"/>
            </when>
            <when expression="#[message.inboundProperties['http.relative.path'] == '4']">
                <scripting:component doc:name="Groovy">
                    <scripting:script engine="Groovy"><![CDATA[throw new java.lang.IllegalArgumentException('Invalid relative path. GET the root url to see valid values. Thrown by Groovy',new Exception('nested exception to show deeper stack trace'));]]></scripting:script>
                </scripting:component>
            </when>
            <otherwise>
                <set-payload value="&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;Request #[message.inboundProperties['http.context.uri']]#[message.inboundProperties['http.context.path']]# &lt;br&gt;where the number is an exception number.&lt;ul&gt;&lt;li&gt;#[message.inboundProperties['http.context.uri']]#[message.inboundProperties['http.context.path']]1:  Javascript throwing native Javascript TypeError&lt;/li&gt;&lt;li&gt;#[message.inboundProperties['http.context.uri']]#[message.inboundProperties['http.context.path']]2: Ruby throwing native Ruby RaiseException&lt;/li&gt;&lt;li&gt;#[message.inboundProperties['http.context.uri']]#[message.inboundProperties['http.context.path']]3: Java throwing IllegalStateException wrapping IllegalAccessException&lt;/li&gt;&lt;li&gt; #[message.inboundProperties['http.context.uri']]#[message.inboundProperties['http.context.path']]4: Groovy throwing an IllegalArgumentException&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;http.context.path:#[message.inboundProperties['http.context.path']]&lt;br&gt;http.context.uri:#[message.inboundProperties['http.context.uri']]&lt;br&gt;http.relative.path:#[message.inboundProperties['http.relative.path']]&lt;br&gt;http.request.path:#[message.inboundProperties['http.request.path']]&lt;br&gt;http.query.params:#[message.inboundProperties['http.query.params']]&lt;br&gt;&lt;/body&gt;&lt;/html&gt;" doc:name="help page at doc root"/>

            </otherwise>
        </choice>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
        	<component doc:name="Record Exception in Coda Hale metrics">
        		<spring-object bean="codahaleMetricRecordFlowException" />
        	</component>
            <logger  level="INFO" doc:name="Logger"/>
            <component class="com.freemansoft.dummyclasses.ExceptionToHtmlTransformer" doc:name="Convert Exception Info to HTML"/>
        </catch-exception-strategy>
    </flow>
    <flow name="generate_connector_system_exception" doc:name="generate_connector_system_exception" doc:description="This generates a system exception on startup because the HTTPS endpoint is using a HTTP connector that is mis configured for its key store">
        <https:inbound-endpoint exchange-pattern="request-response" host="localhost" port="8081" connector-ref="HTTP_HTTPS" doc:name="HTTPS"/>
        <logger level="INFO" doc:name="Logger"/>
    </flow>
</mule>
